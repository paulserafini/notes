#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../theme.css">

#+NAME: add-bars
#+BEGIN_SRC emacs-lisp :exports none :results output
  (load-file "../bars.el")
#+END_SRC
#+CALL: add-bars()

#+TITLE: Network diagrams

# https://bookdown.org/MathiasHarrer/Doing_Meta_Analysis_in_R/frequentist-network-meta-analysis.html

You can create a network diagram using the igraph package.
To make a network, first you need to format your data so that each row is a drug pair:

| Trial | Drug 1 | Drug 2 |
|-------+--------+--------|
|     1 |      1 |      2 |
|     2 |      1 |      3 |
|     3 |      1 |      4 |
|     3 |      1 |      5 |
|     3 |      4 |      5 |
|     4 |      2 |      3 |

If you have a list where each element is a vector containing a the trial and its interventions, then you can do this:

#+BEGIN_SRC R
  library(gtools)
  library(dplyr)
  library(tidyr)

  trials <- list(c("trial 1", 0, 1),
                 c("trial 2", 0, 1, 2))

  comparisons <- lapply(trials, function(i) combinations(length(i)-1, 2, i[-1]))
  comparisons <- do.call(rbind, comparisons)
#+END_SRC

Or, if you have a list where each vector is a trial and a drug, then you can do this:

#+BEGIN_SRC R
  library(gtools)
  library(dplyr)
  library(tidyr)

  trials <- list(c("trial 1", 0),
                 c("trial 1", 1),
                 c("trial 0", 0),
                 c("trial 0", 1),
                 c("trial 0", 2))

  do.call(rbind, trials) %>%
    data.frame(stringsAsFactors=FALSE) %>%
    group_split(X1, keep=FALSE) %>%
    lapply(function(i) c(i$X2)) -> trials

  comparisons <- lapply(trials, function(i) combinations(length(i), 2, i))
  comparisons <- do.call(rbind, comparisons)
#+END_SRC

With your data in the proper format you can then create a list of edges and their weights like so:

#+BEGIN_SRC R :session tmp
  library(dplyr)
  #library(tidyr)
  library(igraph)
  library(netmeta) # For the Senn2013 dataset

  data(Senn2013)
  comparisons <- Senn2013

  ## https://stackoverflow.com/a/51769190
  comparisons %>%
    rowwise() %>%
    mutate(sorted = paste(sort(c(treat1.long, treat2.long)), collapse = "_")) %>%
    tidyr::separate(sorted, c("from", "to"), sep="_") %>%
    group_by(from, to) %>%
    summarize(weight = n()) -> data

  edges <- data[,1:2]
  weight <- data$weight
#+END_SRC

And then you can plot it:

#+BEGIN_SRC R :session tmp :exports both :file ./img/network.svg :results output graphics
  # Identify clusters
  out <- graph_from_edgelist(as.matrix(edges), directed = F)
  co <- cluster_optimal(out, weight)
  graph <- delete_edges(out, E(out)[crossing(co, out)])

  # Find number of vertices
  n <- length(unique(c(edges$to, edges$from)))

  # Adjust scale for number of vertices
  if (n <= 5) {
    V(graph)$size <- 25
    V(graph)$label.cex=1
    E(graph)$label.cex=1
  } else if (n > 5 & n <= 10) {
    V(graph)$size <- 20
    V(graph)$label.cex=0.75
    E(graph)$label.cex=0.75
  } else if (n > 10 & n <= 20) {
    V(graph)$size <- 15
    V(graph)$label.cex=0.5
    E(graph)$label.cex=0.5
  }

  # Appearance
  V(graph)$color <- 1:n
  V(graph)$frame.color <- "white"
  V(graph)$label.color <- "black"
  E(graph)$label.color <- "black"
  E(graph)$weight <- weight
  
  # Make the same layout each time
  set.seed(1)

  par(mar=c(0,0,0,0))
  plot(graph, edge.label=weight, edge.width=weight)
#+END_SRC

#+RESULTS:
[[file:./img/network.svg]]
