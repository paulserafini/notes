#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../theme.css">

#+NAME: add-bars
#+BEGIN_SRC emacs-lisp :exports none :results output
  (load-file "../bars.el")
#+END_SRC
#+CALL: add-bars()

#+TITLE: Randomly choose an outcome

In meta-analysis you shouldn't include more than one estimate from the same study, or you'll introduce bias.
The simplest way to deal with is to choose one estimate from each study, but to avoid bias this has to be done randomly.

#+NAME: example-data
| study | intervention | outcome | nc |  Nc | nt |  Nt |
|-------+--------------+---------+----+-----+----+-----|
|     0 |            0 |     0-1 | 80 | 221 | 16 | 175 |
|     0 |            0 |     0-2 | 16 | 175 | 80 | 221 |
|     0 |            1 |     0-1 | 89 | 138 | 46 | 208 |
|     0 |            1 |     0-2 | 71 | 112 | 79 | 333 |
|     1 |            0 |       1 | 77 | 143 | 62 | 233 |
|     1 |            1 |       2 | 88 | 102 | 21 | 118 |

#+BEGIN_SRC R :var data=example-data :colnames yes :exports both
  library(tidyr)
  library(dplyr)
  library(meta)

  coalesce <- function(...) {
    Reduce(function(x, y) ifelse(is.na(x), y, x),
           list(...))
  }

  # Categorise each outcome
  # https://stackoverflow.com/a/34703058
  regex <- c("^0")
  name <- c("0")
  data$category <- apply(Vectorize(grepl, "pattern")(regex, data$outcome), 1,
                         function(i) name[which(i)[1]])

  # Values not matched by a regex above are replaced with NA
  # This gets them back
  data$category <- coalesce(data$category, data$outcome)

  ## Randomly choose one outcome from each category
  data %>%
    group_by(study, category) %>%
    filter(outcome == sample(unique(outcome), 1)) %>%
    ungroup()
#+END_SRC

#+NAME: result
#+RESULTS:
| study | intervention | outcome | nc |  Nc | nt |  Nt | category |
|-------+--------------+---------+----+-----+----+-----+----------|
|     0 |            0 |     0-1 | 80 | 221 | 16 | 175 |        0 |
|     0 |            1 |     0-1 | 89 | 138 | 46 | 208 |        0 |
|     1 |            0 |       1 | 77 | 143 | 62 | 233 |        1 |
|     1 |            1 |       2 | 88 | 102 | 21 | 118 |        2 |
