#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../theme.css">

#+NAME: add-bars
#+BEGIN_SRC emacs-lisp :exports none :results output
  (load-file "../bars.el")
#+END_SRC
#+CALL: add-bars()

#+TITLE: Generate symmetric, whole number/fraction axis ticks

#+BEGIN_SRC R :session tmp :exports both
  iseq <- function(i=10, n=5) {
    exp(seq(log(i^-n), log(i^n), length.out = n*2+1))
  }

  findLogTicks <- function(LL, UL) {
    min <- 10000
    for (i in 1:10) {
      for (n in 2:4) {
        #diff <- (max(c(1/LL, UL)) - max(iseq(i, n)))^2
        diff <- max(iseq(i, n)) - max(c(1/LL, UL))
        if (diff > 0 & diff < min) {
          min <- diff
          ticks <- iseq(i, n)
        }
      }
    }
    label <- format(ticks, trim=TRUE, scientific=FALSE, drop0trailing=TRUE)
    start <- which(label == 1)
    end <- length(label)
    label[1:(start-1)] <- sprintf("1/%s", rev(label[(start+1):end]))
    names(ticks) <- label
    ticks
  }
#+END_SRC

#+RESULTS:

Here's an example:

#+BEGIN_SRC R :session tmp :exports both :file img/ticks.svg :results graphics
  set.seed(1)

  Ne <- sample(100:500, 5)
  ne <- sapply(Ne, function(i) sample(0:i, 1), simplify=TRUE)
  Nc <- sample(100:500, 5)
  nc <- sapply(Nc, function(i) sample(0:i, 1), simplify=TRUE)

  RR <- (ne/Ne)/(nc/Nc)
  LL <- exp(log(RR) - 1.96 * sqrt(((Ne - ne)/ne)/Ne + ((Nc - nc)/nc)/Nc))
  UL <- exp(log(RR) + 1.96 * sqrt(((Ne - ne)/ne)/Ne + ((Nc - nc)/nc)/Nc))

  ticks <- findLogTicks(LL, UL)

  trial <- 1:5
  par(mar = c(2, 4, 0.5, 0.5))
  plot(RR, trial,
       xlim=c(min(ticks), max(ticks)),
       pch=19,
       yaxt='n',
       xaxt='n',
       xlab="", ylab="",
       log='x')
  axis(1, ticks, names(ticks), las=1)
  axis(2, 1:10, las=1)
  arrows(LL, trial, UL, trial, length=0.05, angle=90, code=3)
#+END_SRC

#+RESULTS:
[[file:img/ticks.svg]]
